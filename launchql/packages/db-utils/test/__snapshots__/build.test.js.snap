// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`build works 1`] = `
"CREATE EXTENSION IF NOT EXISTS \\"plpgsql\\" CASCADE;
CREATE EXTENSION IF NOT EXISTS \\"uuid-ossp\\" CASCADE;
CREATE EXTENSION IF NOT EXISTS \\"pgcrypto\\" CASCADE;
CREATE FUNCTION get_entity_from_str ( qualified_name text ) RETURNS text AS $EOFCODE$
DECLARE
parts text[];
BEGIN
SELECT
* INTO parts
FROM
regexp_split_to_array(qualified_name, E'\\\\\\\\.');
IF cardinality(parts) > 1 THEN
RETURN parts[2];
ELSE
RETURN parts[1];
END IF;
END;
$EOFCODE$ LANGUAGE plpgsql STRICT;
CREATE FUNCTION get_schema_from_str ( qualified_name text ) RETURNS text AS $EOFCODE$
DECLARE
parts text[];
BEGIN
SELECT
* INTO parts
FROM
regexp_split_to_array(qualified_name, E'\\\\\\\\.');
IF cardinality(parts) > 1 THEN
RETURN parts[1];
ELSE
RETURN 'public';
END IF;
END;
$EOFCODE$ LANGUAGE plpgsql STRICT;
CREATE FUNCTION drop_function ( _functionname text, OUT func_drops int ) AS $EOFCODE$
DECLARE
_sql text;
BEGIN
SELECT
count(*)::int,
string_agg(format('DROP FUNCTION %s(%s);', p.oid::regproc, pg_get_function_identity_arguments(p.oid)), ' ')
FROM
pg_catalog.pg_proc p
JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace
WHERE
n.nspname = get_schema_from_str (_functionname)
AND p.proname = get_entity_from_str (_functionname) INTO func_drops, _sql;
IF func_drops > 0 THEN
EXECUTE _sql;
ELSE
RAISE
EXCEPTION 'Nonexistent function --> %s', _functionname
USING HINT = 'Please check';
END IF;
END
$EOFCODE$ LANGUAGE plpgsql;
CREATE FUNCTION grant_execute_on_function ( _functionname text, _role text, OUT func_grants int ) AS $EOFCODE$
DECLARE
_sql text;
BEGIN
SELECT
count(*)::int,
string_agg(format('GRANT EXECUTE ON FUNCTION %s(%s) TO %s;', p.oid::regproc, pg_get_function_identity_arguments(p.oid), _role), ' ')
FROM
pg_catalog.pg_proc p
JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace
WHERE
n.nspname = get_schema_from_str (_functionname)
AND p.proname = get_entity_from_str (_functionname) INTO func_grants, _sql;
IF func_grants > 0 THEN
EXECUTE _sql;
ELSE
RAISE
EXCEPTION 'Nonexistent function --> %s', _functionname
USING HINT = 'Please check';
END IF;
END
$EOFCODE$ LANGUAGE plpgsql;
CREATE FUNCTION list_indexes ( _table text, _index text ) RETURNS TABLE ( schema_name text, table_name text, index_name text ) AS $EOFCODE$
SELECT
n.nspname::text AS schema_name,
t.relname::text AS table_name,
i.relname::text AS index_name
FROM
pg_class t,
pg_class i,
pg_index ix,
pg_catalog.pg_namespace n
WHERE
t.oid = ix.indrelid
AND i.oid = ix.indexrelid
AND n.oid = i.relnamespace
AND n.nspname = get_schema_from_str(_table)
AND i.relname = _index
AND t.relname = get_entity_from_str(_table);
$EOFCODE$ LANGUAGE sql IMMUTABLE;
CREATE FUNCTION list_memberships ( _user text ) RETURNS TABLE ( rolname text ) AS $EOFCODE$ WITH RECURSIVE cte AS (
SELECT
oid
FROM
pg_roles
WHERE
rolname = _user
UNION ALL
SELECT
m.roleid
FROM
cte
JOIN pg_auth_members m ON m.member = cte.oid
)
SELECT
pg_roles.rolname::text AS rolname
FROM
cte c,
pg_roles
WHERE
pg_roles.oid = c.oid;
$EOFCODE$ LANGUAGE sql IMMUTABLE;
CREATE FUNCTION revoke_execute_on_function ( _functionname text, _role text, OUT func_revocations int ) AS $EOFCODE$
DECLARE
_sql text;
BEGIN
SELECT
count(*)::int,
string_agg(format('REVOKE EXECUTE ON FUNCTION %s(%s) FROM %s;', p.oid::regproc, pg_get_function_identity_arguments(p.oid), _role), ' ')
FROM
pg_catalog.pg_proc p
JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace
WHERE
n.nspname = get_schema_from_str (_functionname)
AND p.proname = get_entity_from_str (_functionname) INTO func_revocations, _sql;
IF func_revocations > 0 THEN
EXECUTE _sql;
ELSE
RAISE
EXCEPTION 'Nonexistent function --> %s', _functionname
USING HINT = 'Please check';
END IF;
END
$EOFCODE$ LANGUAGE plpgsql;
CREATE FUNCTION tg_update_timestamps (  ) RETURNS trigger AS $EOFCODE$
BEGIN
-- cheap way to ensure created_at is immutable
NEW.created_at = OLD.created_at;
-- updated_at
NEW.updated_at = NOW();
RETURN NEW;
END;
$EOFCODE$ LANGUAGE plpgsql;
CREATE FUNCTION verify_constraint ( _table text, _name text ) RETURNS boolean AS $EOFCODE$
BEGIN
IF EXISTS (
SELECT c.conname, pg_get_constraintdef(c.oid)
FROM   pg_constraint c
WHERE conname=_name
AND c.conrelid = _table::regclass
) THEN
RETURN TRUE;
ELSE
RAISE
EXCEPTION 'Nonexistent constraint --> %s', _name
USING HINT = 'Please check';
END IF;
END;
$EOFCODE$ LANGUAGE plpgsql IMMUTABLE;
CREATE FUNCTION verify_domain ( _type text ) RETURNS boolean AS $EOFCODE$
BEGIN
IF EXISTS (
SELECT
pg_type.typname,
n.nspname
FROM
pg_type,
pg_catalog.pg_namespace n
WHERE
typtype = 'd'
AND typname = get_entity_from_str(_type) AND nspname = get_schema_from_str(_type)) THEN
RETURN TRUE;
ELSE
RAISE
EXCEPTION 'Nonexistent type --> %s', _type
USING HINT = 'Please check';
END IF;
END;
$EOFCODE$ LANGUAGE plpgsql IMMUTABLE;
CREATE FUNCTION verify_extension ( _extname text ) RETURNS boolean AS $EOFCODE$
BEGIN
IF EXISTS (
SELECT
1
FROM
pg_available_extensions
WHERE
name = _extname
) THEN
RETURN TRUE;
ELSE
RAISE
EXCEPTION 'Nonexistent extension --> %s', _extname
USING HINT = 'Please check';
END IF;
END;
$EOFCODE$ LANGUAGE plpgsql IMMUTABLE;
CREATE FUNCTION verify_function ( _name text, _user text ) RETURNS boolean AS $EOFCODE$
BEGIN
IF EXISTS (
SELECT
has_function_privilege(_user, p.oid, 'execute')
FROM
pg_catalog.pg_proc p
JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace
WHERE
n.nspname = get_schema_from_str(_name) AND p.proname = get_entity_from_str(_name)) THEN
RETURN TRUE;
ELSE
RAISE
EXCEPTION 'Nonexistent function --> %s', _name
USING HINT = 'Please check';
END IF;
END;
$EOFCODE$ LANGUAGE plpgsql IMMUTABLE;
CREATE FUNCTION verify_index ( _table text, _index text ) RETURNS boolean AS $EOFCODE$
BEGIN
IF EXISTS (
SELECT
list_indexes (_table, _index)
) THEN
RETURN TRUE;
ELSE
RAISE
EXCEPTION 'Nonexistent index --> %s', _index
USING HINT = 'Please check';
END IF;
END;
$EOFCODE$ LANGUAGE plpgsql IMMUTABLE;
CREATE FUNCTION verify_membership ( _user text, _role text ) RETURNS boolean AS $EOFCODE$
BEGIN
IF EXISTS (
SELECT
1
FROM
list_memberships (_user)
WHERE
rolname = _role) THEN
RETURN TRUE;
ELSE
RAISE
EXCEPTION 'Nonexistent member --> %s', _user
USING HINT = 'Please check';
END IF;
END;
$EOFCODE$ LANGUAGE plpgsql IMMUTABLE;
CREATE FUNCTION verify_policy ( _policy text, _table text ) RETURNS boolean AS $EOFCODE$
BEGIN
IF EXISTS (
SELECT 1
FROM pg_class p
JOIN pg_catalog.pg_namespace n ON n.oid = p.relnamespace
JOIN pg_policy pol on pol.polrelid = p.relfilenode
WHERE
pol.polname = _policy
AND relrowsecurity = 'true'
AND relname = get_entity_from_str(_table)
AND nspname = get_schema_from_str(_table)
) THEN
RETURN TRUE;
ELSE
RAISE
EXCEPTION 'Nonexistent policy or missing relrowsecurity --> %s', _policy
USING HINT = 'Please check';
END IF;
END;
$EOFCODE$ LANGUAGE plpgsql IMMUTABLE;
CREATE FUNCTION verify_role ( _user text ) RETURNS boolean AS $EOFCODE$
BEGIN
IF EXISTS (
SELECT
1
FROM
pg_roles
WHERE
rolname = _user) THEN
RETURN TRUE;
ELSE
RAISE
EXCEPTION 'Nonexistent user --> %s', _user
USING HINT = 'Please check';
END IF;
END;
$EOFCODE$ LANGUAGE plpgsql IMMUTABLE;
CREATE FUNCTION verify_schema ( _schema text ) RETURNS boolean AS $EOFCODE$
BEGIN
IF EXISTS (
select * from pg_catalog.pg_namespace where nspname = _schema) THEN
RETURN TRUE;
ELSE
RAISE
EXCEPTION 'Nonexistent schema --> %s', _schema
USING HINT = 'Please check';
END IF;
END;
$EOFCODE$ LANGUAGE plpgsql IMMUTABLE;
CREATE FUNCTION verify_security ( _table text ) RETURNS boolean AS $EOFCODE$
BEGIN
IF EXISTS (
SELECT n.oid, relname, n.nspname
FROM pg_class p
JOIN pg_catalog.pg_namespace n ON n.oid = p.relnamespace
WHERE relrowsecurity = 'true'
AND relname = get_entity_from_str(_table)
AND nspname = get_schema_from_str(_table)
) THEN
RETURN TRUE;
ELSE
RAISE
EXCEPTION 'Nonexistent security --> %s', _name
USING HINT = 'Please check';
END IF;
END;
$EOFCODE$ LANGUAGE plpgsql IMMUTABLE;
CREATE FUNCTION verify_table_grant ( _table text, _privilege text, _role text ) RETURNS boolean AS $EOFCODE$
BEGIN
IF EXISTS (
SELECT grantee, privilege_type
FROM information_schema.role_table_grants
WHERE table_schema=get_schema_from_str(_table) AND table_name=get_entity_from_str(_table) AND privilege_type=_privilege AND grantee=_role) THEN
RETURN TRUE;
ELSE
RAISE
EXCEPTION 'Nonexistent table grant --> %s', _privilege
USING HINT = 'Please check';
END IF;
END;
$EOFCODE$ LANGUAGE plpgsql IMMUTABLE;
CREATE FUNCTION verify_table ( _table text ) RETURNS boolean AS $EOFCODE$
BEGIN
IF EXISTS (
SELECT *
FROM   information_schema.tables
WHERE  table_schema = get_schema_from_str(_table)
AND    table_name = get_entity_from_str(_table)) THEN
RETURN TRUE;
ELSE
RAISE
EXCEPTION 'Nonexistent table --> %s', _table
USING HINT = 'Please check';
END IF;
END;
$EOFCODE$ LANGUAGE plpgsql IMMUTABLE;
CREATE FUNCTION verify_trigger ( _trigger text ) RETURNS boolean AS $EOFCODE$
BEGIN
IF EXISTS (
SELECT
pg_trigger.tgname,
n.nspname
FROM
pg_trigger,
pg_catalog.pg_namespace n
WHERE
tgname = get_entity_from_str(_trigger) AND nspname = get_schema_from_str(_trigger)) THEN
RETURN TRUE;
ELSE
RAISE
EXCEPTION 'Nonexistent trigger --> %s', _trigger
USING HINT = 'Please check';
END IF;
END;
$EOFCODE$ LANGUAGE plpgsql IMMUTABLE;
CREATE FUNCTION verify_type ( _type text ) RETURNS boolean AS $EOFCODE$
BEGIN
IF EXISTS (
SELECT
pg_type.typname,
n.nspname
FROM
pg_type,
pg_catalog.pg_namespace n
WHERE
typname = get_entity_from_str(_type) AND nspname = get_schema_from_str(_type)) THEN
RETURN TRUE;
ELSE
RAISE
EXCEPTION 'Nonexistent type --> %s', _type
USING HINT = 'Please check';
END IF;
END;
$EOFCODE$ LANGUAGE plpgsql IMMUTABLE;
CREATE FUNCTION verify_view ( _view text ) RETURNS boolean AS $EOFCODE$
BEGIN
IF EXISTS (
SELECT *
FROM   information_schema.views
WHERE  table_schema = get_schema_from_str(_view)
AND    table_name = get_entity_from_str(_view)) THEN
RETURN TRUE;
ELSE
RAISE
EXCEPTION 'Nonexistent view --> %s', _view
USING HINT = 'Please check';
END IF;
END;
$EOFCODE$ LANGUAGE plpgsql IMMUTABLE;
CREATE FUNCTION generate_secret ( len int DEFAULT 32, symbols boolean DEFAULT (FALSE) ) RETURNS text AS $EOFCODE$
DECLARE
v_set text;
v_bytea bytea;
v_output text;
x int;
y int;
b_index int;
BEGIN
v_set = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz';
v_output = '';
v_bytea = gen_random_bytes(len);
IF (symbols IS NOT NULL) THEN
v_set = v_set || '!@#$%^&*()<>?/[]{},.:;';
END IF;
FOR x IN 0 .. len-1 LOOP
y := get_byte(v_bytea, x);
b_index := floor(y/255.0 * (length(v_set)-1));
v_output := v_output || substring(v_set from b_index for 1);
END LOOP;
RETURN v_output;
END;
$EOFCODE$ LANGUAGE plpgsql STABLE;
CREATE FUNCTION secretfunction (  ) RETURNS int AS $EOFCODE$
SELECT 1;
$EOFCODE$ LANGUAGE sql STABLE;"
`;
