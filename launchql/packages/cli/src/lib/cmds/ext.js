import '@launchql/db-template';
import { promisify } from 'util';
import { sync as mkdirp } from 'mkdirp';
import { exec } from 'child_process';
import { prompt } from 'inquirerer';
import { sync as glob } from 'glob';
import { sqitchPath as path, getExtensionName } from '@launchql/db-utils';
import { dirname, basename, resolve } from 'path';
import * as shell from 'shelljs';
import { writeFileSync, readFileSync } from 'fs';

import plan from './plan';

// MARKED FOR DEPRECATION

const questions = [
  {
    name: 'extname',
    message: 'extension name (e.g., app-extensions)',
    default: 'app-extensions',
    required: true
  }
];

export default async (argv) => {
  const sqitchPath = await path();

  const { extname, projects } = await prompt(questions, argv);
  const controlFile = glob(`${sqitchPath}/*.control`);
  if (!controlFile || !controlFile.length) {
    throw new Error('no control file found!');
  }
  let extensions;
  try {
    extensions = readFileSync(controlFile[0])
      .toString()
      .split('\n')
      .find((line) => line.match(/^requires/))
      .split('=')[1]
      .split("'")[1]
      .split(',')
      .map((a) => a.trim());
  } catch (e) {
    throw new Error('missing requires from control files or bad syntax');
  }

  const note =
    '-- NOTE: this is generated by skitch, extensions are not actually bundled in final output, just used for testing';
  const output = {
    deploy: [note],
    revert: [note],
    verify: [note]
  };

  // DEPLOY
  output.deploy.push(`-- Deploy extensions/${extname} to pg`);
  output.deploy.push('BEGIN;\n');
  extensions.forEach((ext) => {
    output.deploy.push(`CREATE EXTENSION IF NOT EXISTS "${ext}" CASCADE;`);
  });
  output.deploy.push('\nCOMMIT;');

  // REVERT
  output.revert.push(`-- Revert extensions/${extname} from pg`);
  output.revert.push('BEGIN;\n');
  extensions.reverse().forEach((ext) => {
    // certain extensions let us not drop, thanks
    if (ext === 'uuid-ossp') return;
    if (ext === 'plpgsql') return;
    output.revert.push(`DROP EXTENSION IF EXISTS "${ext}";`);
  });
  output.revert.push('\nCOMMIT;');

  // VERIFY
  output.verify.push(`-- Verify extensions/${extname} on pg`);
  output.verify.push('BEGIN;\n');
  extensions.forEach((ext) => {
    output.verify.push(`SELECT verify_extension('${ext}');`);
  });
  output.verify.push('\nROLLBACK;');

  Object.keys(output).forEach((type) => {
    mkdirp(`${sqitchPath}/${type}/extensions`);
    writeFileSync(
      `${sqitchPath}/${type}/extensions/${extname}.sql`,
      output[type].join('\n')
    );
  });

  const pkg = require(`${sqitchPath}/package.json`);
  const name = await getExtensionName(sqitchPath);
  await plan({ name });
};
