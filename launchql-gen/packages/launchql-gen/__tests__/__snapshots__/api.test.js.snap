// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`generate 1`] = `
Object {
  "actionFragment": "fragment actionFragment on Action {
  id
  name
  photo
  title
  description
  locationRadius
  url
  timeRequired
  startDate
  endDate
  approved
  rewardAmount
  activityFeedText
  callToAction
  completedActionText
  descriptionHeader
  tags
  createdBy
  updatedBy
  createdAt
  updatedAt
  locationId
  ownerId
  actionResults
  actionItems
  userActions
  userActionResults
  userActionItems
}
",
  "actionItemFragment": "fragment actionItemFragment on ActionItem {
  id
  name
  description
  link
  type
  itemOrder
  requiredItem
  notificationText
  embedCode
  createdBy
  updatedBy
  createdAt
  updatedAt
  actionId
  ownerId
  userActionItems
}
",
  "actionResultFragment": "fragment actionResultFragment on ActionResult {
  id
  createdBy
  updatedBy
  createdAt
  updatedAt
  actionId
  ownerId
  userActionResults
}
",
  "createActionItemMutation": "mutation createActionItemMutation($name: String, $description: String, $link: String, $type: String, $itemOrder: Int, $requiredItem: Boolean, $notificationText: String, $embedCode: String, $actionId: UUID!, $ownerId: UUID!) {
  createActionItem(input: {actionItem: {name: $name, description: $description, link: $link, type: $type, itemOrder: $itemOrder, requiredItem: $requiredItem, notificationText: $notificationText, embedCode: $embedCode, actionId: $actionId, ownerId: $ownerId}}) {
    actionItem {
      id
      name
      description
      link
      type
      itemOrder
      requiredItem
      notificationText
      embedCode
      createdBy
      updatedBy
      createdAt
      updatedAt
      actionId
      ownerId
    }
  }
}
",
  "createActionMutation": "mutation createActionMutation($name: String, $photo: JSON, $title: String, $description: String, $locationRadius: BigFloat, $url: String, $timeRequired: BigFloat, $startDate: Datetime, $endDate: Datetime, $approved: Boolean, $rewardAmount: BigFloat, $activityFeedText: String, $callToAction: String, $completedActionText: String, $descriptionHeader: String, $tags: [String], $locationId: UUID, $ownerId: UUID!, $photoUpload: Upload) {
  createAction(input: {action: {name: $name, photo: $photo, title: $title, description: $description, locationRadius: $locationRadius, url: $url, timeRequired: $timeRequired, startDate: $startDate, endDate: $endDate, approved: $approved, rewardAmount: $rewardAmount, activityFeedText: $activityFeedText, callToAction: $callToAction, completedActionText: $completedActionText, descriptionHeader: $descriptionHeader, tags: $tags, locationId: $locationId, ownerId: $ownerId, photoUpload: $photoUpload}}) {
    action {
      id
      name
      photo
      title
      description
      locationRadius
      url
      timeRequired
      startDate
      endDate
      approved
      rewardAmount
      activityFeedText
      callToAction
      completedActionText
      descriptionHeader
      tags
      createdBy
      updatedBy
      createdAt
      updatedAt
      locationId
      ownerId
      photoUpload
    }
  }
}
",
  "createActionResultMutation": "mutation createActionResultMutation($actionId: UUID!, $ownerId: UUID!) {
  createActionResult(input: {actionResult: {actionId: $actionId, ownerId: $ownerId}}) {
    actionResult {
      id
      createdBy
      updatedBy
      createdAt
      updatedAt
      actionId
      ownerId
    }
  }
}
",
  "createGoalMutation": "mutation createGoalMutation($name: String, $shortName: String, $icon: String, $subHead: String, $audio: JSON, $audioDuration: BigFloat, $explanationTitle: String, $explanation: String, $audioUpload: Upload) {
  createGoal(input: {goal: {name: $name, shortName: $shortName, icon: $icon, subHead: $subHead, audio: $audio, audioDuration: $audioDuration, explanationTitle: $explanationTitle, explanation: $explanation, audioUpload: $audioUpload}}) {
    goal {
      id
      name
      shortName
      icon
      subHead
      audio
      audioDuration
      explanationTitle
      explanation
      createdBy
      updatedBy
      createdAt
      updatedAt
      audioUpload
    }
  }
}
",
  "createLocationMutation": "mutation createLocationMutation($geo: GeoJSON) {
  createLocation(input: {location: {geo: $geo}}) {
    location {
      id
      geo
      createdBy
      updatedBy
      createdAt
      updatedAt
    }
  }
}
",
  "createNewsUpdateMutation": "mutation createNewsUpdateMutation($name: String, $description: String, $photo: JSON, $photoUpload: Upload) {
  createNewsUpdate(input: {newsUpdate: {name: $name, description: $description, photo: $photo, photoUpload: $photoUpload}}) {
    newsUpdate {
      id
      name
      description
      photo
      createdBy
      updatedBy
      createdAt
      updatedAt
      photoUpload
    }
  }
}
",
  "createUserActionItemMutation": "mutation createUserActionItemMutation($date: Datetime, $value: JSON, $status: String, $userId: UUID!, $actionId: UUID!, $userActionId: UUID!, $actionItemId: UUID!) {
  createUserActionItem(input: {userActionItem: {date: $date, value: $value, status: $status, userId: $userId, actionId: $actionId, userActionId: $userActionId, actionItemId: $actionItemId}}) {
    userActionItem {
      id
      date
      value
      status
      createdBy
      updatedBy
      createdAt
      updatedAt
      userId
      actionId
      userActionId
      actionItemId
    }
  }
}
",
  "createUserActionMutation": "mutation createUserActionMutation($actionStarted: Datetime, $verified: Boolean, $verifiedDate: Datetime, $status: String, $userRating: Int, $rejected: Boolean, $rejectedReason: String, $userId: UUID!, $verifierId: UUID, $actionId: UUID!) {
  createUserAction(input: {userAction: {actionStarted: $actionStarted, verified: $verified, verifiedDate: $verifiedDate, status: $status, userRating: $userRating, rejected: $rejected, rejectedReason: $rejectedReason, userId: $userId, verifierId: $verifierId, actionId: $actionId}}) {
    userAction {
      id
      actionStarted
      verified
      verifiedDate
      status
      userRating
      rejected
      rejectedReason
      createdBy
      updatedBy
      createdAt
      updatedAt
      userId
      verifierId
      actionId
    }
  }
}
",
  "createUserActionResultMutation": "mutation createUserActionResultMutation($date: Datetime, $value: JSON, $userId: UUID!, $actionId: UUID!, $userActionId: UUID!, $actionResultId: UUID!) {
  createUserActionResult(input: {userActionResult: {date: $date, value: $value, userId: $userId, actionId: $actionId, userActionId: $userActionId, actionResultId: $actionResultId}}) {
    userActionResult {
      id
      date
      value
      createdBy
      updatedBy
      createdAt
      updatedAt
      userId
      actionId
      userActionId
      actionResultId
    }
  }
}
",
  "createUserCharacteristicMutation": "mutation createUserCharacteristicMutation($income: BigFloat, $gender: Int, $race: String, $age: Int, $dob: Date, $education: String, $homeOwnership: String, $treeHuggerLevel: Int, $freeTime: Int, $researchToDoer: Int, $userId: UUID!) {
  createUserCharacteristic(input: {userCharacteristic: {income: $income, gender: $gender, race: $race, age: $age, dob: $dob, education: $education, homeOwnership: $homeOwnership, treeHuggerLevel: $treeHuggerLevel, freeTime: $freeTime, researchToDoer: $researchToDoer, userId: $userId}}) {
    userCharacteristic {
      id
      income
      gender
      race
      age
      dob
      education
      homeOwnership
      treeHuggerLevel
      freeTime
      researchToDoer
      createdBy
      updatedBy
      createdAt
      updatedAt
      userId
    }
  }
}
",
  "createUserConnectionMutation": "mutation createUserConnectionMutation($accepted: Boolean, $requesterId: UUID!, $responderId: UUID!) {
  createUserConnection(input: {userConnection: {accepted: $accepted, requesterId: $requesterId, responderId: $responderId}}) {
    userConnection {
      id
      accepted
      createdBy
      updatedBy
      createdAt
      updatedAt
      requesterId
      responderId
    }
  }
}
",
  "createUserContactMutation": "mutation createUserContactMutation($vcf: JSON, $fullName: String, $emails: [LaunchqlInternalTypeEmail], $device: String, $userId: UUID!) {
  createUserContact(input: {userContact: {vcf: $vcf, fullName: $fullName, emails: $emails, device: $device, userId: $userId}}) {
    userContact {
      id
      vcf
      fullName
      emails
      device
      createdBy
      updatedBy
      createdAt
      updatedAt
      userId
    }
  }
}
",
  "createUserEmailMutation": "mutation createUserEmailMutation($userId: UUID!, $email: LaunchqlInternalTypeEmail!, $isVerified: Boolean) {
  createUserEmail(input: {userEmail: {userId: $userId, email: $email, isVerified: $isVerified}}) {
    userEmail {
      id
      userId
      email
      isVerified
    }
  }
}
",
  "createUserMutation": "mutation createUserMutation($type: Int) {
  createUser(input: {user: {type: $type}}) {
    user {
      id
      type
    }
  }
}
",
  "createUserProfileMutation": "mutation createUserProfileMutation($profilePicture: JSON, $bio: String, $reputation: BigFloat, $firstName: String, $lastName: String, $tags: [String], $userId: UUID!, $profilePictureUpload: Upload) {
  createUserProfile(input: {userProfile: {profilePicture: $profilePicture, bio: $bio, reputation: $reputation, firstName: $firstName, lastName: $lastName, tags: $tags, userId: $userId, profilePictureUpload: $profilePictureUpload}}) {
    userProfile {
      id
      profilePicture
      bio
      reputation
      firstName
      lastName
      tags
      createdBy
      updatedBy
      createdAt
      updatedAt
      userId
      profilePictureUpload
    }
  }
}
",
  "createUserSettingMutation": "mutation createUserSettingMutation($searchRadius: BigFloat, $zip: String, $geo: GeoJSON, $userId: UUID!) {
  createUserSetting(input: {userSetting: {searchRadius: $searchRadius, zip: $zip, geo: $geo, userId: $userId}}) {
    userSetting {
      id
      searchRadius
      zip
      geo
      createdBy
      updatedBy
      createdAt
      updatedAt
      userId
    }
  }
}
",
  "deleteActionItemMutation": "mutation deleteActionItemMutation($id: UUID!) {
  deleteActionItem(input: {id: $id}) {
    clientMutationId
  }
}
",
  "deleteActionMutation": "mutation deleteActionMutation($id: UUID!) {
  deleteAction(input: {id: $id}) {
    clientMutationId
  }
}
",
  "deleteActionResultMutation": "mutation deleteActionResultMutation($id: UUID!) {
  deleteActionResult(input: {id: $id}) {
    clientMutationId
  }
}
",
  "deleteGoalMutation": "mutation deleteGoalMutation($id: UUID!) {
  deleteGoal(input: {id: $id}) {
    clientMutationId
  }
}
",
  "deleteLocationMutation": "mutation deleteLocationMutation($id: UUID!) {
  deleteLocation(input: {id: $id}) {
    clientMutationId
  }
}
",
  "deleteNewsUpdateMutation": "mutation deleteNewsUpdateMutation($id: UUID!) {
  deleteNewsUpdate(input: {id: $id}) {
    clientMutationId
  }
}
",
  "deleteUserActionItemMutation": "mutation deleteUserActionItemMutation($id: UUID!) {
  deleteUserActionItem(input: {id: $id}) {
    clientMutationId
  }
}
",
  "deleteUserActionMutation": "mutation deleteUserActionMutation($id: UUID!) {
  deleteUserAction(input: {id: $id}) {
    clientMutationId
  }
}
",
  "deleteUserActionResultMutation": "mutation deleteUserActionResultMutation($id: UUID!) {
  deleteUserActionResult(input: {id: $id}) {
    clientMutationId
  }
}
",
  "deleteUserCharacteristicByUserIdMutation": "mutation deleteUserCharacteristicByUserIdMutation($userId: UUID!) {
  deleteUserCharacteristicByUserId(input: {userId: $userId}) {
    clientMutationId
  }
}
",
  "deleteUserCharacteristicMutation": "mutation deleteUserCharacteristicMutation($id: UUID!) {
  deleteUserCharacteristic(input: {id: $id}) {
    clientMutationId
  }
}
",
  "deleteUserConnectionMutation": "mutation deleteUserConnectionMutation($id: UUID!) {
  deleteUserConnection(input: {id: $id}) {
    clientMutationId
  }
}
",
  "deleteUserContactMutation": "mutation deleteUserContactMutation($id: UUID!) {
  deleteUserContact(input: {id: $id}) {
    clientMutationId
  }
}
",
  "deleteUserEmailByEmailMutation": "mutation deleteUserEmailByEmailMutation($email: LaunchqlInternalTypeEmail!) {
  deleteUserEmailByEmail(input: {email: $email}) {
    clientMutationId
  }
}
",
  "deleteUserEmailMutation": "mutation deleteUserEmailMutation($id: UUID!) {
  deleteUserEmail(input: {id: $id}) {
    clientMutationId
  }
}
",
  "deleteUserMutation": "mutation deleteUserMutation($id: UUID!) {
  deleteUser(input: {id: $id}) {
    clientMutationId
  }
}
",
  "deleteUserProfileByUserIdMutation": "mutation deleteUserProfileByUserIdMutation($userId: UUID!) {
  deleteUserProfileByUserId(input: {userId: $userId}) {
    clientMutationId
  }
}
",
  "deleteUserProfileMutation": "mutation deleteUserProfileMutation($id: UUID!) {
  deleteUserProfile(input: {id: $id}) {
    clientMutationId
  }
}
",
  "deleteUserSettingByUserIdMutation": "mutation deleteUserSettingByUserIdMutation($userId: UUID!) {
  deleteUserSettingByUserId(input: {userId: $userId}) {
    clientMutationId
  }
}
",
  "deleteUserSettingMutation": "mutation deleteUserSettingMutation($id: UUID!) {
  deleteUserSetting(input: {id: $id}) {
    clientMutationId
  }
}
",
  "getActionItemQuery": "query getActionItemQuery($id: UUID!) {
  actionItem(id: $id) {
    id
    name
    description
    link
    type
    itemOrder
    requiredItem
    notificationText
    embedCode
    createdBy
    updatedBy
    createdAt
    updatedAt
    actionId
    ownerId
    userActionItems
  }
}
",
  "getActionItemsOrderByEnums": "query getActionItemsOrderByEnums {
  __type(name: \\"ActionItemsOrderBy\\") {
    enumValues {
      name
    }
  }
}
",
  "getActionItemsPaginated": "query getActionItemsPaginated($first: Int, $last: Int, $offset: Int, $after: Cursor, $before: Cursor, $condition: ActionItemCondition, $filter: ActionItemFilter, $orderBy: [ActionItemsOrderBy!]) {
  actionItems(first: $first, last: $last, offset: $offset, after: $after, before: $before, condition: $condition, filter: $filter, orderBy: $orderBy) {totalCount, pageInfo {
    hasNextPage
    hasPreviousPage
    endCursor
    startCursor
  }, edges {
    cursor
    node {
      id
      name
      description
      link
      type
      itemOrder
      requiredItem
      notificationText
      embedCode
      createdBy
      updatedBy
      createdAt
      updatedAt
      actionId
      ownerId
      userActionItems
    }
  }}
}
",
  "getActionItemsQuery": "query getActionItemsQuery($first: Int, $last: Int, $after: Cursor, $before: Cursor, $offset: Int, $condition: ActionItemCondition, $filter: ActionItemFilter, $orderBy: [ActionItemsOrderBy!]) {
  actionItems(first: $first, last: $last, offset: $offset, after: $after, before: $before, condition: $condition, filter: $filter, orderBy: $orderBy) {totalCount, pageInfo {
    hasNextPage
    hasPreviousPage
    endCursor
    startCursor
  }, nodes {
    id
    name
    description
    link
    type
    itemOrder
    requiredItem
    notificationText
    embedCode
    createdBy
    updatedBy
    createdAt
    updatedAt
    actionId
    ownerId
    userActionItems
  }}
}
",
  "getActionItemsQueryAll": "query getActionItemsQueryAll {
  actionItems {totalCount, nodes {
    id
    name
    description
    link
    type
    itemOrder
    requiredItem
    notificationText
    embedCode
    createdBy
    updatedBy
    createdAt
    updatedAt
    actionId
    ownerId
    userActionItems
  }}
}
",
  "getActionQuery": "query getActionQuery($id: UUID!) {
  action(id: $id) {
    id
    name
    photo
    title
    description
    locationRadius
    url
    timeRequired
    startDate
    endDate
    approved
    rewardAmount
    activityFeedText
    callToAction
    completedActionText
    descriptionHeader
    tags
    createdBy
    updatedBy
    createdAt
    updatedAt
    locationId
    ownerId
    actionResults
    actionItems
    userActions
    userActionResults
    userActionItems
  }
}
",
  "getActionResultQuery": "query getActionResultQuery($id: UUID!) {
  actionResult(id: $id) {
    id
    createdBy
    updatedBy
    createdAt
    updatedAt
    actionId
    ownerId
    userActionResults
  }
}
",
  "getActionResultsOrderByEnums": "query getActionResultsOrderByEnums {
  __type(name: \\"ActionResultsOrderBy\\") {
    enumValues {
      name
    }
  }
}
",
  "getActionResultsPaginated": "query getActionResultsPaginated($first: Int, $last: Int, $offset: Int, $after: Cursor, $before: Cursor, $condition: ActionResultCondition, $filter: ActionResultFilter, $orderBy: [ActionResultsOrderBy!]) {
  actionResults(first: $first, last: $last, offset: $offset, after: $after, before: $before, condition: $condition, filter: $filter, orderBy: $orderBy) {totalCount, pageInfo {
    hasNextPage
    hasPreviousPage
    endCursor
    startCursor
  }, edges {
    cursor
    node {
      id
      createdBy
      updatedBy
      createdAt
      updatedAt
      actionId
      ownerId
      userActionResults
    }
  }}
}
",
  "getActionResultsQuery": "query getActionResultsQuery($first: Int, $last: Int, $after: Cursor, $before: Cursor, $offset: Int, $condition: ActionResultCondition, $filter: ActionResultFilter, $orderBy: [ActionResultsOrderBy!]) {
  actionResults(first: $first, last: $last, offset: $offset, after: $after, before: $before, condition: $condition, filter: $filter, orderBy: $orderBy) {totalCount, pageInfo {
    hasNextPage
    hasPreviousPage
    endCursor
    startCursor
  }, nodes {
    id
    createdBy
    updatedBy
    createdAt
    updatedAt
    actionId
    ownerId
    userActionResults
  }}
}
",
  "getActionResultsQueryAll": "query getActionResultsQueryAll {
  actionResults {totalCount, nodes {
    id
    createdBy
    updatedBy
    createdAt
    updatedAt
    actionId
    ownerId
    userActionResults
  }}
}
",
  "getActionsOrderByEnums": "query getActionsOrderByEnums {
  __type(name: \\"ActionsOrderBy\\") {
    enumValues {
      name
    }
  }
}
",
  "getActionsPaginated": "query getActionsPaginated($first: Int, $last: Int, $offset: Int, $after: Cursor, $before: Cursor, $condition: ActionCondition, $filter: ActionFilter, $orderBy: [ActionsOrderBy!]) {
  actions(first: $first, last: $last, offset: $offset, after: $after, before: $before, condition: $condition, filter: $filter, orderBy: $orderBy) {totalCount, pageInfo {
    hasNextPage
    hasPreviousPage
    endCursor
    startCursor
  }, edges {
    cursor
    node {
      id
      name
      photo
      title
      description
      locationRadius
      url
      timeRequired
      startDate
      endDate
      approved
      rewardAmount
      activityFeedText
      callToAction
      completedActionText
      descriptionHeader
      tags
      createdBy
      updatedBy
      createdAt
      updatedAt
      locationId
      ownerId
      actionResults
      actionItems
      userActions
      userActionResults
      userActionItems
    }
  }}
}
",
  "getActionsQuery": "query getActionsQuery($first: Int, $last: Int, $after: Cursor, $before: Cursor, $offset: Int, $condition: ActionCondition, $filter: ActionFilter, $orderBy: [ActionsOrderBy!]) {
  actions(first: $first, last: $last, offset: $offset, after: $after, before: $before, condition: $condition, filter: $filter, orderBy: $orderBy) {totalCount, pageInfo {
    hasNextPage
    hasPreviousPage
    endCursor
    startCursor
  }, nodes {
    id
    name
    photo
    title
    description
    locationRadius
    url
    timeRequired
    startDate
    endDate
    approved
    rewardAmount
    activityFeedText
    callToAction
    completedActionText
    descriptionHeader
    tags
    createdBy
    updatedBy
    createdAt
    updatedAt
    locationId
    ownerId
    actionResults
    actionItems
    userActions
    userActionResults
    userActionItems
  }}
}
",
  "getActionsQueryAll": "query getActionsQueryAll {
  actions {totalCount, nodes {
    id
    name
    photo
    title
    description
    locationRadius
    url
    timeRequired
    startDate
    endDate
    approved
    rewardAmount
    activityFeedText
    callToAction
    completedActionText
    descriptionHeader
    tags
    createdBy
    updatedBy
    createdAt
    updatedAt
    locationId
    ownerId
    actionResults
    actionItems
    userActions
    userActionResults
    userActionItems
  }}
}
",
  "getGetCurrentUserQuery": "query getGetCurrentUserQuery {
  getCurrentUser {
    id
    type
    userEmails
    userProfiles
    userSettings
    userCharacteristics
    userContacts
    userConnectionsByRequesterId
    userConnectionsByResponderId
    ownedActions
    ownedActionResults
    ownedActionItems
    userActions
    userActionsByVerifierId
    userActionResults
    userActionItems
  }
}
",
  "getGoalQuery": "query getGoalQuery($id: UUID!) {
  goal(id: $id) {
    id
    name
    shortName
    icon
    subHead
    audio
    audioDuration
    explanationTitle
    explanation
    createdBy
    updatedBy
    createdAt
    updatedAt
  }
}
",
  "getGoalsOrderByEnums": "query getGoalsOrderByEnums {
  __type(name: \\"GoalsOrderBy\\") {
    enumValues {
      name
    }
  }
}
",
  "getGoalsPaginated": "query getGoalsPaginated($first: Int, $last: Int, $offset: Int, $after: Cursor, $before: Cursor, $condition: GoalCondition, $filter: GoalFilter, $orderBy: [GoalsOrderBy!]) {
  goals(first: $first, last: $last, offset: $offset, after: $after, before: $before, condition: $condition, filter: $filter, orderBy: $orderBy) {totalCount, pageInfo {
    hasNextPage
    hasPreviousPage
    endCursor
    startCursor
  }, edges {
    cursor
    node {
      id
      name
      shortName
      icon
      subHead
      audio
      audioDuration
      explanationTitle
      explanation
      createdBy
      updatedBy
      createdAt
      updatedAt
    }
  }}
}
",
  "getGoalsQuery": "query getGoalsQuery($first: Int, $last: Int, $after: Cursor, $before: Cursor, $offset: Int, $condition: GoalCondition, $filter: GoalFilter, $orderBy: [GoalsOrderBy!]) {
  goals(first: $first, last: $last, offset: $offset, after: $after, before: $before, condition: $condition, filter: $filter, orderBy: $orderBy) {totalCount, pageInfo {
    hasNextPage
    hasPreviousPage
    endCursor
    startCursor
  }, nodes {
    id
    name
    shortName
    icon
    subHead
    audio
    audioDuration
    explanationTitle
    explanation
    createdBy
    updatedBy
    createdAt
    updatedAt
  }}
}
",
  "getGoalsQueryAll": "query getGoalsQueryAll {
  goals {totalCount, nodes {
    id
    name
    shortName
    icon
    subHead
    audio
    audioDuration
    explanationTitle
    explanation
    createdBy
    updatedBy
    createdAt
    updatedAt
  }}
}
",
  "getLocationQuery": "query getLocationQuery($id: UUID!) {
  location(id: $id) {
    id
    geo
    createdBy
    updatedBy
    createdAt
    updatedAt
    actions
  }
}
",
  "getLocationsOrderByEnums": "query getLocationsOrderByEnums {
  __type(name: \\"LocationsOrderBy\\") {
    enumValues {
      name
    }
  }
}
",
  "getLocationsPaginated": "query getLocationsPaginated($first: Int, $last: Int, $offset: Int, $after: Cursor, $before: Cursor, $condition: LocationCondition, $filter: LocationFilter, $orderBy: [LocationsOrderBy!]) {
  locations(first: $first, last: $last, offset: $offset, after: $after, before: $before, condition: $condition, filter: $filter, orderBy: $orderBy) {totalCount, pageInfo {
    hasNextPage
    hasPreviousPage
    endCursor
    startCursor
  }, edges {
    cursor
    node {
      id
      geo
      createdBy
      updatedBy
      createdAt
      updatedAt
      actions
    }
  }}
}
",
  "getLocationsQuery": "query getLocationsQuery($first: Int, $last: Int, $after: Cursor, $before: Cursor, $offset: Int, $condition: LocationCondition, $filter: LocationFilter, $orderBy: [LocationsOrderBy!]) {
  locations(first: $first, last: $last, offset: $offset, after: $after, before: $before, condition: $condition, filter: $filter, orderBy: $orderBy) {totalCount, pageInfo {
    hasNextPage
    hasPreviousPage
    endCursor
    startCursor
  }, nodes {
    id
    geo
    createdBy
    updatedBy
    createdAt
    updatedAt
    actions
  }}
}
",
  "getLocationsQueryAll": "query getLocationsQueryAll {
  locations {totalCount, nodes {
    id
    geo
    createdBy
    updatedBy
    createdAt
    updatedAt
    actions
  }}
}
",
  "getMetaQuery": "query getMetaQuery {
  _meta {
    tables
  }
}
",
  "getNewsUpdateQuery": "query getNewsUpdateQuery($id: UUID!) {
  newsUpdate(id: $id) {
    id
    name
    description
    photo
    createdBy
    updatedBy
    createdAt
    updatedAt
  }
}
",
  "getNewsUpdatesOrderByEnums": "query getNewsUpdatesOrderByEnums {
  __type(name: \\"NewsUpdatesOrderBy\\") {
    enumValues {
      name
    }
  }
}
",
  "getNewsUpdatesPaginated": "query getNewsUpdatesPaginated($first: Int, $last: Int, $offset: Int, $after: Cursor, $before: Cursor, $condition: NewsUpdateCondition, $filter: NewsUpdateFilter, $orderBy: [NewsUpdatesOrderBy!]) {
  newsUpdates(first: $first, last: $last, offset: $offset, after: $after, before: $before, condition: $condition, filter: $filter, orderBy: $orderBy) {totalCount, pageInfo {
    hasNextPage
    hasPreviousPage
    endCursor
    startCursor
  }, edges {
    cursor
    node {
      id
      name
      description
      photo
      createdBy
      updatedBy
      createdAt
      updatedAt
    }
  }}
}
",
  "getNewsUpdatesQuery": "query getNewsUpdatesQuery($first: Int, $last: Int, $after: Cursor, $before: Cursor, $offset: Int, $condition: NewsUpdateCondition, $filter: NewsUpdateFilter, $orderBy: [NewsUpdatesOrderBy!]) {
  newsUpdates(first: $first, last: $last, offset: $offset, after: $after, before: $before, condition: $condition, filter: $filter, orderBy: $orderBy) {totalCount, pageInfo {
    hasNextPage
    hasPreviousPage
    endCursor
    startCursor
  }, nodes {
    id
    name
    description
    photo
    createdBy
    updatedBy
    createdAt
    updatedAt
  }}
}
",
  "getNewsUpdatesQueryAll": "query getNewsUpdatesQueryAll {
  newsUpdates {totalCount, nodes {
    id
    name
    description
    photo
    createdBy
    updatedBy
    createdAt
    updatedAt
  }}
}
",
  "getUserActionItemQuery": "query getUserActionItemQuery($id: UUID!) {
  userActionItem(id: $id) {
    id
    date
    value
    status
    createdBy
    updatedBy
    createdAt
    updatedAt
    userId
    actionId
    userActionId
    actionItemId
  }
}
",
  "getUserActionItemsOrderByEnums": "query getUserActionItemsOrderByEnums {
  __type(name: \\"UserActionItemsOrderBy\\") {
    enumValues {
      name
    }
  }
}
",
  "getUserActionItemsPaginated": "query getUserActionItemsPaginated($first: Int, $last: Int, $offset: Int, $after: Cursor, $before: Cursor, $condition: UserActionItemCondition, $filter: UserActionItemFilter, $orderBy: [UserActionItemsOrderBy!]) {
  userActionItems(first: $first, last: $last, offset: $offset, after: $after, before: $before, condition: $condition, filter: $filter, orderBy: $orderBy) {totalCount, pageInfo {
    hasNextPage
    hasPreviousPage
    endCursor
    startCursor
  }, edges {
    cursor
    node {
      id
      date
      value
      status
      createdBy
      updatedBy
      createdAt
      updatedAt
      userId
      actionId
      userActionId
      actionItemId
    }
  }}
}
",
  "getUserActionItemsQuery": "query getUserActionItemsQuery($first: Int, $last: Int, $after: Cursor, $before: Cursor, $offset: Int, $condition: UserActionItemCondition, $filter: UserActionItemFilter, $orderBy: [UserActionItemsOrderBy!]) {
  userActionItems(first: $first, last: $last, offset: $offset, after: $after, before: $before, condition: $condition, filter: $filter, orderBy: $orderBy) {totalCount, pageInfo {
    hasNextPage
    hasPreviousPage
    endCursor
    startCursor
  }, nodes {
    id
    date
    value
    status
    createdBy
    updatedBy
    createdAt
    updatedAt
    userId
    actionId
    userActionId
    actionItemId
  }}
}
",
  "getUserActionItemsQueryAll": "query getUserActionItemsQueryAll {
  userActionItems {totalCount, nodes {
    id
    date
    value
    status
    createdBy
    updatedBy
    createdAt
    updatedAt
    userId
    actionId
    userActionId
    actionItemId
  }}
}
",
  "getUserActionQuery": "query getUserActionQuery($id: UUID!) {
  userAction(id: $id) {
    id
    actionStarted
    verified
    verifiedDate
    status
    userRating
    rejected
    rejectedReason
    createdBy
    updatedBy
    createdAt
    updatedAt
    userId
    verifierId
    actionId
    userActionResults
    userActionItems
  }
}
",
  "getUserActionResultQuery": "query getUserActionResultQuery($id: UUID!) {
  userActionResult(id: $id) {
    id
    date
    value
    createdBy
    updatedBy
    createdAt
    updatedAt
    userId
    actionId
    userActionId
    actionResultId
  }
}
",
  "getUserActionResultsOrderByEnums": "query getUserActionResultsOrderByEnums {
  __type(name: \\"UserActionResultsOrderBy\\") {
    enumValues {
      name
    }
  }
}
",
  "getUserActionResultsPaginated": "query getUserActionResultsPaginated($first: Int, $last: Int, $offset: Int, $after: Cursor, $before: Cursor, $condition: UserActionResultCondition, $filter: UserActionResultFilter, $orderBy: [UserActionResultsOrderBy!]) {
  userActionResults(first: $first, last: $last, offset: $offset, after: $after, before: $before, condition: $condition, filter: $filter, orderBy: $orderBy) {totalCount, pageInfo {
    hasNextPage
    hasPreviousPage
    endCursor
    startCursor
  }, edges {
    cursor
    node {
      id
      date
      value
      createdBy
      updatedBy
      createdAt
      updatedAt
      userId
      actionId
      userActionId
      actionResultId
    }
  }}
}
",
  "getUserActionResultsQuery": "query getUserActionResultsQuery($first: Int, $last: Int, $after: Cursor, $before: Cursor, $offset: Int, $condition: UserActionResultCondition, $filter: UserActionResultFilter, $orderBy: [UserActionResultsOrderBy!]) {
  userActionResults(first: $first, last: $last, offset: $offset, after: $after, before: $before, condition: $condition, filter: $filter, orderBy: $orderBy) {totalCount, pageInfo {
    hasNextPage
    hasPreviousPage
    endCursor
    startCursor
  }, nodes {
    id
    date
    value
    createdBy
    updatedBy
    createdAt
    updatedAt
    userId
    actionId
    userActionId
    actionResultId
  }}
}
",
  "getUserActionResultsQueryAll": "query getUserActionResultsQueryAll {
  userActionResults {totalCount, nodes {
    id
    date
    value
    createdBy
    updatedBy
    createdAt
    updatedAt
    userId
    actionId
    userActionId
    actionResultId
  }}
}
",
  "getUserActionsOrderByEnums": "query getUserActionsOrderByEnums {
  __type(name: \\"UserActionsOrderBy\\") {
    enumValues {
      name
    }
  }
}
",
  "getUserActionsPaginated": "query getUserActionsPaginated($first: Int, $last: Int, $offset: Int, $after: Cursor, $before: Cursor, $condition: UserActionCondition, $filter: UserActionFilter, $orderBy: [UserActionsOrderBy!]) {
  userActions(first: $first, last: $last, offset: $offset, after: $after, before: $before, condition: $condition, filter: $filter, orderBy: $orderBy) {totalCount, pageInfo {
    hasNextPage
    hasPreviousPage
    endCursor
    startCursor
  }, edges {
    cursor
    node {
      id
      actionStarted
      verified
      verifiedDate
      status
      userRating
      rejected
      rejectedReason
      createdBy
      updatedBy
      createdAt
      updatedAt
      userId
      verifierId
      actionId
      userActionResults
      userActionItems
    }
  }}
}
",
  "getUserActionsQuery": "query getUserActionsQuery($first: Int, $last: Int, $after: Cursor, $before: Cursor, $offset: Int, $condition: UserActionCondition, $filter: UserActionFilter, $orderBy: [UserActionsOrderBy!]) {
  userActions(first: $first, last: $last, offset: $offset, after: $after, before: $before, condition: $condition, filter: $filter, orderBy: $orderBy) {totalCount, pageInfo {
    hasNextPage
    hasPreviousPage
    endCursor
    startCursor
  }, nodes {
    id
    actionStarted
    verified
    verifiedDate
    status
    userRating
    rejected
    rejectedReason
    createdBy
    updatedBy
    createdAt
    updatedAt
    userId
    verifierId
    actionId
    userActionResults
    userActionItems
  }}
}
",
  "getUserActionsQueryAll": "query getUserActionsQueryAll {
  userActions {totalCount, nodes {
    id
    actionStarted
    verified
    verifiedDate
    status
    userRating
    rejected
    rejectedReason
    createdBy
    updatedBy
    createdAt
    updatedAt
    userId
    verifierId
    actionId
    userActionResults
    userActionItems
  }}
}
",
  "getUserCharacteristicByUserIdQuery": "query getUserCharacteristicByUserIdQuery($userId: UUID!) {
  userCharacteristicByUserId(userId: $userId) {
    id
    income
    gender
    race
    age
    dob
    education
    homeOwnership
    treeHuggerLevel
    freeTime
    researchToDoer
    createdBy
    updatedBy
    createdAt
    updatedAt
    userId
  }
}
",
  "getUserCharacteristicQuery": "query getUserCharacteristicQuery($id: UUID!) {
  userCharacteristic(id: $id) {
    id
    income
    gender
    race
    age
    dob
    education
    homeOwnership
    treeHuggerLevel
    freeTime
    researchToDoer
    createdBy
    updatedBy
    createdAt
    updatedAt
    userId
  }
}
",
  "getUserCharacteristicsOrderByEnums": "query getUserCharacteristicsOrderByEnums {
  __type(name: \\"UserCharacteristicsOrderBy\\") {
    enumValues {
      name
    }
  }
}
",
  "getUserCharacteristicsPaginated": "query getUserCharacteristicsPaginated($first: Int, $last: Int, $offset: Int, $after: Cursor, $before: Cursor, $condition: UserCharacteristicCondition, $filter: UserCharacteristicFilter, $orderBy: [UserCharacteristicsOrderBy!]) {
  userCharacteristics(first: $first, last: $last, offset: $offset, after: $after, before: $before, condition: $condition, filter: $filter, orderBy: $orderBy) {totalCount, pageInfo {
    hasNextPage
    hasPreviousPage
    endCursor
    startCursor
  }, edges {
    cursor
    node {
      id
      income
      gender
      race
      age
      dob
      education
      homeOwnership
      treeHuggerLevel
      freeTime
      researchToDoer
      createdBy
      updatedBy
      createdAt
      updatedAt
      userId
    }
  }}
}
",
  "getUserCharacteristicsQuery": "query getUserCharacteristicsQuery($first: Int, $last: Int, $after: Cursor, $before: Cursor, $offset: Int, $condition: UserCharacteristicCondition, $filter: UserCharacteristicFilter, $orderBy: [UserCharacteristicsOrderBy!]) {
  userCharacteristics(first: $first, last: $last, offset: $offset, after: $after, before: $before, condition: $condition, filter: $filter, orderBy: $orderBy) {totalCount, pageInfo {
    hasNextPage
    hasPreviousPage
    endCursor
    startCursor
  }, nodes {
    id
    income
    gender
    race
    age
    dob
    education
    homeOwnership
    treeHuggerLevel
    freeTime
    researchToDoer
    createdBy
    updatedBy
    createdAt
    updatedAt
    userId
  }}
}
",
  "getUserCharacteristicsQueryAll": "query getUserCharacteristicsQueryAll {
  userCharacteristics {totalCount, nodes {
    id
    income
    gender
    race
    age
    dob
    education
    homeOwnership
    treeHuggerLevel
    freeTime
    researchToDoer
    createdBy
    updatedBy
    createdAt
    updatedAt
    userId
  }}
}
",
  "getUserConnectionQuery": "query getUserConnectionQuery($id: UUID!) {
  userConnection(id: $id) {
    id
    accepted
    createdBy
    updatedBy
    createdAt
    updatedAt
    requesterId
    responderId
  }
}
",
  "getUserConnectionsOrderByEnums": "query getUserConnectionsOrderByEnums {
  __type(name: \\"UserConnectionsOrderBy\\") {
    enumValues {
      name
    }
  }
}
",
  "getUserConnectionsPaginated": "query getUserConnectionsPaginated($first: Int, $last: Int, $offset: Int, $after: Cursor, $before: Cursor, $condition: UserConnectionCondition, $filter: UserConnectionFilter, $orderBy: [UserConnectionsOrderBy!]) {
  userConnections(first: $first, last: $last, offset: $offset, after: $after, before: $before, condition: $condition, filter: $filter, orderBy: $orderBy) {totalCount, pageInfo {
    hasNextPage
    hasPreviousPage
    endCursor
    startCursor
  }, edges {
    cursor
    node {
      id
      accepted
      createdBy
      updatedBy
      createdAt
      updatedAt
      requesterId
      responderId
    }
  }}
}
",
  "getUserConnectionsQuery": "query getUserConnectionsQuery($first: Int, $last: Int, $after: Cursor, $before: Cursor, $offset: Int, $condition: UserConnectionCondition, $filter: UserConnectionFilter, $orderBy: [UserConnectionsOrderBy!]) {
  userConnections(first: $first, last: $last, offset: $offset, after: $after, before: $before, condition: $condition, filter: $filter, orderBy: $orderBy) {totalCount, pageInfo {
    hasNextPage
    hasPreviousPage
    endCursor
    startCursor
  }, nodes {
    id
    accepted
    createdBy
    updatedBy
    createdAt
    updatedAt
    requesterId
    responderId
  }}
}
",
  "getUserConnectionsQueryAll": "query getUserConnectionsQueryAll {
  userConnections {totalCount, nodes {
    id
    accepted
    createdBy
    updatedBy
    createdAt
    updatedAt
    requesterId
    responderId
  }}
}
",
  "getUserContactQuery": "query getUserContactQuery($id: UUID!) {
  userContact(id: $id) {
    id
    vcf
    fullName
    emails
    device
    createdBy
    updatedBy
    createdAt
    updatedAt
    userId
  }
}
",
  "getUserContactsOrderByEnums": "query getUserContactsOrderByEnums {
  __type(name: \\"UserContactsOrderBy\\") {
    enumValues {
      name
    }
  }
}
",
  "getUserContactsPaginated": "query getUserContactsPaginated($first: Int, $last: Int, $offset: Int, $after: Cursor, $before: Cursor, $condition: UserContactCondition, $filter: UserContactFilter, $orderBy: [UserContactsOrderBy!]) {
  userContacts(first: $first, last: $last, offset: $offset, after: $after, before: $before, condition: $condition, filter: $filter, orderBy: $orderBy) {totalCount, pageInfo {
    hasNextPage
    hasPreviousPage
    endCursor
    startCursor
  }, edges {
    cursor
    node {
      id
      vcf
      fullName
      emails
      device
      createdBy
      updatedBy
      createdAt
      updatedAt
      userId
    }
  }}
}
",
  "getUserContactsQuery": "query getUserContactsQuery($first: Int, $last: Int, $after: Cursor, $before: Cursor, $offset: Int, $condition: UserContactCondition, $filter: UserContactFilter, $orderBy: [UserContactsOrderBy!]) {
  userContacts(first: $first, last: $last, offset: $offset, after: $after, before: $before, condition: $condition, filter: $filter, orderBy: $orderBy) {totalCount, pageInfo {
    hasNextPage
    hasPreviousPage
    endCursor
    startCursor
  }, nodes {
    id
    vcf
    fullName
    emails
    device
    createdBy
    updatedBy
    createdAt
    updatedAt
    userId
  }}
}
",
  "getUserContactsQueryAll": "query getUserContactsQueryAll {
  userContacts {totalCount, nodes {
    id
    vcf
    fullName
    emails
    device
    createdBy
    updatedBy
    createdAt
    updatedAt
    userId
  }}
}
",
  "getUserEmailByEmailQuery": "query getUserEmailByEmailQuery($email: LaunchqlInternalTypeEmail!) {
  userEmailByEmail(email: $email) {
    id
    userId
    email
    isVerified
  }
}
",
  "getUserEmailQuery": "query getUserEmailQuery($id: UUID!) {
  userEmail(id: $id) {
    id
    userId
    email
    isVerified
  }
}
",
  "getUserEmailsOrderByEnums": "query getUserEmailsOrderByEnums {
  __type(name: \\"UserEmailsOrderBy\\") {
    enumValues {
      name
    }
  }
}
",
  "getUserEmailsPaginated": "query getUserEmailsPaginated($first: Int, $last: Int, $offset: Int, $after: Cursor, $before: Cursor, $condition: UserEmailCondition, $filter: UserEmailFilter, $orderBy: [UserEmailsOrderBy!]) {
  userEmails(first: $first, last: $last, offset: $offset, after: $after, before: $before, condition: $condition, filter: $filter, orderBy: $orderBy) {totalCount, pageInfo {
    hasNextPage
    hasPreviousPage
    endCursor
    startCursor
  }, edges {
    cursor
    node {
      id
      userId
      email
      isVerified
    }
  }}
}
",
  "getUserEmailsQuery": "query getUserEmailsQuery($first: Int, $last: Int, $after: Cursor, $before: Cursor, $offset: Int, $condition: UserEmailCondition, $filter: UserEmailFilter, $orderBy: [UserEmailsOrderBy!]) {
  userEmails(first: $first, last: $last, offset: $offset, after: $after, before: $before, condition: $condition, filter: $filter, orderBy: $orderBy) {totalCount, pageInfo {
    hasNextPage
    hasPreviousPage
    endCursor
    startCursor
  }, nodes {
    id
    userId
    email
    isVerified
  }}
}
",
  "getUserEmailsQueryAll": "query getUserEmailsQueryAll {
  userEmails {totalCount, nodes {
    id
    userId
    email
    isVerified
  }}
}
",
  "getUserProfileByUserIdQuery": "query getUserProfileByUserIdQuery($userId: UUID!) {
  userProfileByUserId(userId: $userId) {
    id
    profilePicture
    bio
    reputation
    firstName
    lastName
    tags
    createdBy
    updatedBy
    createdAt
    updatedAt
    userId
  }
}
",
  "getUserProfileQuery": "query getUserProfileQuery($id: UUID!) {
  userProfile(id: $id) {
    id
    profilePicture
    bio
    reputation
    firstName
    lastName
    tags
    createdBy
    updatedBy
    createdAt
    updatedAt
    userId
  }
}
",
  "getUserProfilesOrderByEnums": "query getUserProfilesOrderByEnums {
  __type(name: \\"UserProfilesOrderBy\\") {
    enumValues {
      name
    }
  }
}
",
  "getUserProfilesPaginated": "query getUserProfilesPaginated($first: Int, $last: Int, $offset: Int, $after: Cursor, $before: Cursor, $condition: UserProfileCondition, $filter: UserProfileFilter, $orderBy: [UserProfilesOrderBy!]) {
  userProfiles(first: $first, last: $last, offset: $offset, after: $after, before: $before, condition: $condition, filter: $filter, orderBy: $orderBy) {totalCount, pageInfo {
    hasNextPage
    hasPreviousPage
    endCursor
    startCursor
  }, edges {
    cursor
    node {
      id
      profilePicture
      bio
      reputation
      firstName
      lastName
      tags
      createdBy
      updatedBy
      createdAt
      updatedAt
      userId
    }
  }}
}
",
  "getUserProfilesQuery": "query getUserProfilesQuery($first: Int, $last: Int, $after: Cursor, $before: Cursor, $offset: Int, $condition: UserProfileCondition, $filter: UserProfileFilter, $orderBy: [UserProfilesOrderBy!]) {
  userProfiles(first: $first, last: $last, offset: $offset, after: $after, before: $before, condition: $condition, filter: $filter, orderBy: $orderBy) {totalCount, pageInfo {
    hasNextPage
    hasPreviousPage
    endCursor
    startCursor
  }, nodes {
    id
    profilePicture
    bio
    reputation
    firstName
    lastName
    tags
    createdBy
    updatedBy
    createdAt
    updatedAt
    userId
  }}
}
",
  "getUserProfilesQueryAll": "query getUserProfilesQueryAll {
  userProfiles {totalCount, nodes {
    id
    profilePicture
    bio
    reputation
    firstName
    lastName
    tags
    createdBy
    updatedBy
    createdAt
    updatedAt
    userId
  }}
}
",
  "getUserQuery": "query getUserQuery($id: UUID!) {
  user(id: $id) {
    id
    type
    userEmails
    userProfiles
    userSettings
    userCharacteristics
    userContacts
    userConnectionsByRequesterId
    userConnectionsByResponderId
    ownedActions
    ownedActionResults
    ownedActionItems
    userActions
    userActionsByVerifierId
    userActionResults
    userActionItems
  }
}
",
  "getUserSettingByUserIdQuery": "query getUserSettingByUserIdQuery($userId: UUID!) {
  userSettingByUserId(userId: $userId) {
    id
    searchRadius
    zip
    geo
    createdBy
    updatedBy
    createdAt
    updatedAt
    userId
  }
}
",
  "getUserSettingQuery": "query getUserSettingQuery($id: UUID!) {
  userSetting(id: $id) {
    id
    searchRadius
    zip
    geo
    createdBy
    updatedBy
    createdAt
    updatedAt
    userId
  }
}
",
  "getUserSettingsOrderByEnums": "query getUserSettingsOrderByEnums {
  __type(name: \\"UserSettingsOrderBy\\") {
    enumValues {
      name
    }
  }
}
",
  "getUserSettingsPaginated": "query getUserSettingsPaginated($first: Int, $last: Int, $offset: Int, $after: Cursor, $before: Cursor, $condition: UserSettingCondition, $filter: UserSettingFilter, $orderBy: [UserSettingsOrderBy!]) {
  userSettings(first: $first, last: $last, offset: $offset, after: $after, before: $before, condition: $condition, filter: $filter, orderBy: $orderBy) {totalCount, pageInfo {
    hasNextPage
    hasPreviousPage
    endCursor
    startCursor
  }, edges {
    cursor
    node {
      id
      searchRadius
      zip
      geo
      createdBy
      updatedBy
      createdAt
      updatedAt
      userId
    }
  }}
}
",
  "getUserSettingsQuery": "query getUserSettingsQuery($first: Int, $last: Int, $after: Cursor, $before: Cursor, $offset: Int, $condition: UserSettingCondition, $filter: UserSettingFilter, $orderBy: [UserSettingsOrderBy!]) {
  userSettings(first: $first, last: $last, offset: $offset, after: $after, before: $before, condition: $condition, filter: $filter, orderBy: $orderBy) {totalCount, pageInfo {
    hasNextPage
    hasPreviousPage
    endCursor
    startCursor
  }, nodes {
    id
    searchRadius
    zip
    geo
    createdBy
    updatedBy
    createdAt
    updatedAt
    userId
  }}
}
",
  "getUserSettingsQueryAll": "query getUserSettingsQueryAll {
  userSettings {totalCount, nodes {
    id
    searchRadius
    zip
    geo
    createdBy
    updatedBy
    createdAt
    updatedAt
    userId
  }}
}
",
  "getUsersOrderByEnums": "query getUsersOrderByEnums {
  __type(name: \\"UsersOrderBy\\") {
    enumValues {
      name
    }
  }
}
",
  "getUsersPaginated": "query getUsersPaginated($first: Int, $last: Int, $offset: Int, $after: Cursor, $before: Cursor, $condition: UserCondition, $filter: UserFilter, $orderBy: [UsersOrderBy!]) {
  users(first: $first, last: $last, offset: $offset, after: $after, before: $before, condition: $condition, filter: $filter, orderBy: $orderBy) {totalCount, pageInfo {
    hasNextPage
    hasPreviousPage
    endCursor
    startCursor
  }, edges {
    cursor
    node {
      id
      type
      userEmails
      userProfiles
      userSettings
      userCharacteristics
      userContacts
      userConnectionsByRequesterId
      userConnectionsByResponderId
      ownedActions
      ownedActionResults
      ownedActionItems
      userActions
      userActionsByVerifierId
      userActionResults
      userActionItems
    }
  }}
}
",
  "getUsersQuery": "query getUsersQuery($first: Int, $last: Int, $after: Cursor, $before: Cursor, $offset: Int, $condition: UserCondition, $filter: UserFilter, $orderBy: [UsersOrderBy!]) {
  users(first: $first, last: $last, offset: $offset, after: $after, before: $before, condition: $condition, filter: $filter, orderBy: $orderBy) {totalCount, pageInfo {
    hasNextPage
    hasPreviousPage
    endCursor
    startCursor
  }, nodes {
    id
    type
    userEmails
    userProfiles
    userSettings
    userCharacteristics
    userContacts
    userConnectionsByRequesterId
    userConnectionsByResponderId
    ownedActions
    ownedActionResults
    ownedActionItems
    userActions
    userActionsByVerifierId
    userActionResults
    userActionItems
  }}
}
",
  "getUsersQueryAll": "query getUsersQueryAll {
  users {totalCount, nodes {
    id
    type
    userEmails
    userProfiles
    userSettings
    userCharacteristics
    userContacts
    userConnectionsByRequesterId
    userConnectionsByResponderId
    ownedActions
    ownedActionResults
    ownedActionItems
    userActions
    userActionsByVerifierId
    userActionResults
    userActionItems
  }}
}
",
  "goalFragment": "fragment goalFragment on Goal {
  id
  name
  shortName
  icon
  subHead
  audio
  audioDuration
  explanationTitle
  explanation
  createdBy
  updatedBy
  createdAt
  updatedAt
}
",
  "locationFragment": "fragment locationFragment on Location {
  id
  geo
  createdBy
  updatedBy
  createdAt
  updatedAt
  actions
}
",
  "loginMutation": "mutation loginMutation($email: String!, $password: String!) {
  login(input: {email: $email, password: $password}) {
    clientMutationId
  }
}
",
  "newsUpdateFragment": "fragment newsUpdateFragment on NewsUpdate {
  id
  name
  description
  photo
  createdBy
  updatedBy
  createdAt
  updatedAt
}
",
  "registerMutation": "mutation registerMutation($email: String!, $password: String!) {
  register(input: {email: $email, password: $password}) {
    clientMutationId
  }
}
",
  "updateActionItemMutation": "mutation updateActionItemMutation($name: String, $description: String, $link: String, $type: String, $itemOrder: Int, $requiredItem: Boolean, $notificationText: String, $embedCode: String, $actionId: UUID, $ownerId: UUID) {
  updateActionItem(input: {id: $id, patch: {name: $name, description: $description, link: $link, type: $type, itemOrder: $itemOrder, requiredItem: $requiredItem, notificationText: $notificationText, embedCode: $embedCode, actionId: $actionId, ownerId: $ownerId}}) {
    actionItem {
      id
      name
      description
      link
      type
      itemOrder
      requiredItem
      notificationText
      embedCode
      createdBy
      updatedBy
      createdAt
      updatedAt
      actionId
      ownerId
    }
  }
}
",
  "updateActionMutation": "mutation updateActionMutation($name: String, $photo: JSON, $title: String, $description: String, $locationRadius: BigFloat, $url: String, $timeRequired: BigFloat, $startDate: Datetime, $endDate: Datetime, $approved: Boolean, $rewardAmount: BigFloat, $activityFeedText: String, $callToAction: String, $completedActionText: String, $descriptionHeader: String, $tags: [String], $locationId: UUID, $ownerId: UUID, $photoUpload: Upload) {
  updateAction(input: {id: $id, patch: {name: $name, photo: $photo, title: $title, description: $description, locationRadius: $locationRadius, url: $url, timeRequired: $timeRequired, startDate: $startDate, endDate: $endDate, approved: $approved, rewardAmount: $rewardAmount, activityFeedText: $activityFeedText, callToAction: $callToAction, completedActionText: $completedActionText, descriptionHeader: $descriptionHeader, tags: $tags, locationId: $locationId, ownerId: $ownerId, photoUpload: $photoUpload}}) {
    action {
      id
      name
      photo
      title
      description
      locationRadius
      url
      timeRequired
      startDate
      endDate
      approved
      rewardAmount
      activityFeedText
      callToAction
      completedActionText
      descriptionHeader
      tags
      createdBy
      updatedBy
      createdAt
      updatedAt
      locationId
      ownerId
      photoUpload
    }
  }
}
",
  "updateActionResultMutation": "mutation updateActionResultMutation($actionId: UUID, $ownerId: UUID) {
  updateActionResult(input: {id: $id, patch: {actionId: $actionId, ownerId: $ownerId}}) {
    actionResult {
      id
      createdBy
      updatedBy
      createdAt
      updatedAt
      actionId
      ownerId
    }
  }
}
",
  "updateGoalMutation": "mutation updateGoalMutation($name: String, $shortName: String, $icon: String, $subHead: String, $audio: JSON, $audioDuration: BigFloat, $explanationTitle: String, $explanation: String, $audioUpload: Upload) {
  updateGoal(input: {id: $id, patch: {name: $name, shortName: $shortName, icon: $icon, subHead: $subHead, audio: $audio, audioDuration: $audioDuration, explanationTitle: $explanationTitle, explanation: $explanation, audioUpload: $audioUpload}}) {
    goal {
      id
      name
      shortName
      icon
      subHead
      audio
      audioDuration
      explanationTitle
      explanation
      createdBy
      updatedBy
      createdAt
      updatedAt
      audioUpload
    }
  }
}
",
  "updateLocationMutation": "mutation updateLocationMutation($geo: GeoJSON) {
  updateLocation(input: {id: $id, patch: {geo: $geo}}) {
    location {
      id
      geo
      createdBy
      updatedBy
      createdAt
      updatedAt
    }
  }
}
",
  "updateNewsUpdateMutation": "mutation updateNewsUpdateMutation($name: String, $description: String, $photo: JSON, $photoUpload: Upload) {
  updateNewsUpdate(input: {id: $id, patch: {name: $name, description: $description, photo: $photo, photoUpload: $photoUpload}}) {
    newsUpdate {
      id
      name
      description
      photo
      createdBy
      updatedBy
      createdAt
      updatedAt
      photoUpload
    }
  }
}
",
  "updateUserActionItemMutation": "mutation updateUserActionItemMutation($date: Datetime, $value: JSON, $status: String, $userId: UUID, $actionId: UUID, $userActionId: UUID, $actionItemId: UUID) {
  updateUserActionItem(input: {id: $id, patch: {date: $date, value: $value, status: $status, userId: $userId, actionId: $actionId, userActionId: $userActionId, actionItemId: $actionItemId}}) {
    userActionItem {
      id
      date
      value
      status
      createdBy
      updatedBy
      createdAt
      updatedAt
      userId
      actionId
      userActionId
      actionItemId
    }
  }
}
",
  "updateUserActionMutation": "mutation updateUserActionMutation($actionStarted: Datetime, $verified: Boolean, $verifiedDate: Datetime, $status: String, $userRating: Int, $rejected: Boolean, $rejectedReason: String, $userId: UUID, $verifierId: UUID, $actionId: UUID) {
  updateUserAction(input: {id: $id, patch: {actionStarted: $actionStarted, verified: $verified, verifiedDate: $verifiedDate, status: $status, userRating: $userRating, rejected: $rejected, rejectedReason: $rejectedReason, userId: $userId, verifierId: $verifierId, actionId: $actionId}}) {
    userAction {
      id
      actionStarted
      verified
      verifiedDate
      status
      userRating
      rejected
      rejectedReason
      createdBy
      updatedBy
      createdAt
      updatedAt
      userId
      verifierId
      actionId
    }
  }
}
",
  "updateUserActionResultMutation": "mutation updateUserActionResultMutation($date: Datetime, $value: JSON, $userId: UUID, $actionId: UUID, $userActionId: UUID, $actionResultId: UUID) {
  updateUserActionResult(input: {id: $id, patch: {date: $date, value: $value, userId: $userId, actionId: $actionId, userActionId: $userActionId, actionResultId: $actionResultId}}) {
    userActionResult {
      id
      date
      value
      createdBy
      updatedBy
      createdAt
      updatedAt
      userId
      actionId
      userActionId
      actionResultId
    }
  }
}
",
  "updateUserCharacteristicByUserIdMutation": "mutation updateUserCharacteristicByUserIdMutation($income: BigFloat, $gender: Int, $race: String, $age: Int, $dob: Date, $education: String, $homeOwnership: String, $treeHuggerLevel: Int, $freeTime: Int, $researchToDoer: Int, $userId: UUID!) {
  updateUserCharacteristicByUserId(input: {userId: $userId, patch: {income: $income, gender: $gender, race: $race, age: $age, dob: $dob, education: $education, homeOwnership: $homeOwnership, treeHuggerLevel: $treeHuggerLevel, freeTime: $freeTime, researchToDoer: $researchToDoer}}) {
    userCharacteristic {
      id
      income
      gender
      race
      age
      dob
      education
      homeOwnership
      treeHuggerLevel
      freeTime
      researchToDoer
      createdBy
      updatedBy
      createdAt
      updatedAt
      userId
    }
  }
}
",
  "updateUserCharacteristicMutation": "mutation updateUserCharacteristicMutation($income: BigFloat, $gender: Int, $race: String, $age: Int, $dob: Date, $education: String, $homeOwnership: String, $treeHuggerLevel: Int, $freeTime: Int, $researchToDoer: Int, $userId: UUID) {
  updateUserCharacteristic(input: {id: $id, patch: {income: $income, gender: $gender, race: $race, age: $age, dob: $dob, education: $education, homeOwnership: $homeOwnership, treeHuggerLevel: $treeHuggerLevel, freeTime: $freeTime, researchToDoer: $researchToDoer, userId: $userId}}) {
    userCharacteristic {
      id
      income
      gender
      race
      age
      dob
      education
      homeOwnership
      treeHuggerLevel
      freeTime
      researchToDoer
      createdBy
      updatedBy
      createdAt
      updatedAt
      userId
    }
  }
}
",
  "updateUserConnectionMutation": "mutation updateUserConnectionMutation($accepted: Boolean, $requesterId: UUID, $responderId: UUID) {
  updateUserConnection(input: {id: $id, patch: {accepted: $accepted, requesterId: $requesterId, responderId: $responderId}}) {
    userConnection {
      id
      accepted
      createdBy
      updatedBy
      createdAt
      updatedAt
      requesterId
      responderId
    }
  }
}
",
  "updateUserContactMutation": "mutation updateUserContactMutation($vcf: JSON, $fullName: String, $emails: [LaunchqlInternalTypeEmail], $device: String, $userId: UUID) {
  updateUserContact(input: {id: $id, patch: {vcf: $vcf, fullName: $fullName, emails: $emails, device: $device, userId: $userId}}) {
    userContact {
      id
      vcf
      fullName
      emails
      device
      createdBy
      updatedBy
      createdAt
      updatedAt
      userId
    }
  }
}
",
  "updateUserEmailByEmailMutation": "mutation updateUserEmailByEmailMutation($userId: UUID, $email: LaunchqlInternalTypeEmail!, $isVerified: Boolean) {
  updateUserEmailByEmail(input: {email: $email, patch: {userId: $userId, isVerified: $isVerified}}) {
    userEmail {
      id
      userId
      email
      isVerified
    }
  }
}
",
  "updateUserEmailMutation": "mutation updateUserEmailMutation($userId: UUID, $email: LaunchqlInternalTypeEmail, $isVerified: Boolean) {
  updateUserEmail(input: {id: $id, patch: {userId: $userId, email: $email, isVerified: $isVerified}}) {
    userEmail {
      id
      userId
      email
      isVerified
    }
  }
}
",
  "updateUserMutation": "mutation updateUserMutation($type: Int) {
  updateUser(input: {id: $id, patch: {type: $type}}) {
    user {
      id
      type
    }
  }
}
",
  "updateUserProfileByUserIdMutation": "mutation updateUserProfileByUserIdMutation($profilePicture: JSON, $bio: String, $reputation: BigFloat, $firstName: String, $lastName: String, $tags: [String], $userId: UUID!, $profilePictureUpload: Upload) {
  updateUserProfileByUserId(input: {userId: $userId, patch: {profilePicture: $profilePicture, bio: $bio, reputation: $reputation, firstName: $firstName, lastName: $lastName, tags: $tags, profilePictureUpload: $profilePictureUpload}}) {
    userProfile {
      id
      profilePicture
      bio
      reputation
      firstName
      lastName
      tags
      createdBy
      updatedBy
      createdAt
      updatedAt
      userId
      profilePictureUpload
    }
  }
}
",
  "updateUserProfileMutation": "mutation updateUserProfileMutation($profilePicture: JSON, $bio: String, $reputation: BigFloat, $firstName: String, $lastName: String, $tags: [String], $userId: UUID, $profilePictureUpload: Upload) {
  updateUserProfile(input: {id: $id, patch: {profilePicture: $profilePicture, bio: $bio, reputation: $reputation, firstName: $firstName, lastName: $lastName, tags: $tags, userId: $userId, profilePictureUpload: $profilePictureUpload}}) {
    userProfile {
      id
      profilePicture
      bio
      reputation
      firstName
      lastName
      tags
      createdBy
      updatedBy
      createdAt
      updatedAt
      userId
      profilePictureUpload
    }
  }
}
",
  "updateUserSettingByUserIdMutation": "mutation updateUserSettingByUserIdMutation($searchRadius: BigFloat, $zip: String, $geo: GeoJSON, $userId: UUID!) {
  updateUserSettingByUserId(input: {userId: $userId, patch: {searchRadius: $searchRadius, zip: $zip, geo: $geo}}) {
    userSetting {
      id
      searchRadius
      zip
      geo
      createdBy
      updatedBy
      createdAt
      updatedAt
      userId
    }
  }
}
",
  "updateUserSettingMutation": "mutation updateUserSettingMutation($searchRadius: BigFloat, $zip: String, $geo: GeoJSON, $userId: UUID) {
  updateUserSetting(input: {id: $id, patch: {searchRadius: $searchRadius, zip: $zip, geo: $geo, userId: $userId}}) {
    userSetting {
      id
      searchRadius
      zip
      geo
      createdBy
      updatedBy
      createdAt
      updatedAt
      userId
    }
  }
}
",
  "userActionFragment": "fragment userActionFragment on UserAction {
  id
  actionStarted
  verified
  verifiedDate
  status
  userRating
  rejected
  rejectedReason
  createdBy
  updatedBy
  createdAt
  updatedAt
  userId
  verifierId
  actionId
  userActionResults
  userActionItems
}
",
  "userActionItemFragment": "fragment userActionItemFragment on UserActionItem {
  id
  date
  value
  status
  createdBy
  updatedBy
  createdAt
  updatedAt
  userId
  actionId
  userActionId
  actionItemId
}
",
  "userActionResultFragment": "fragment userActionResultFragment on UserActionResult {
  id
  date
  value
  createdBy
  updatedBy
  createdAt
  updatedAt
  userId
  actionId
  userActionId
  actionResultId
}
",
  "userCharacteristicFragment": "fragment userCharacteristicFragment on UserCharacteristic {
  id
  income
  gender
  race
  age
  dob
  education
  homeOwnership
  treeHuggerLevel
  freeTime
  researchToDoer
  createdBy
  updatedBy
  createdAt
  updatedAt
  userId
}
",
  "userConnectionFragment": "fragment userConnectionFragment on UserConnection {
  id
  accepted
  createdBy
  updatedBy
  createdAt
  updatedAt
  requesterId
  responderId
}
",
  "userContactFragment": "fragment userContactFragment on UserContact {
  id
  vcf
  fullName
  emails
  device
  createdBy
  updatedBy
  createdAt
  updatedAt
  userId
}
",
  "userEmailFragment": "fragment userEmailFragment on UserEmail {
  id
  userId
  email
  isVerified
}
",
  "userFragment": "fragment userFragment on User {
  id
  type
  userEmails
  userProfiles
  userSettings
  userCharacteristics
  userContacts
  userConnectionsByRequesterId
  userConnectionsByResponderId
  ownedActions
  ownedActionResults
  ownedActionItems
  userActions
  userActionsByVerifierId
  userActionResults
  userActionItems
}
",
  "userProfileFragment": "fragment userProfileFragment on UserProfile {
  id
  profilePicture
  bio
  reputation
  firstName
  lastName
  tags
  createdBy
  updatedBy
  createdAt
  updatedAt
  userId
}
",
  "userSettingFragment": "fragment userSettingFragment on UserSetting {
  id
  searchRadius
  zip
  geo
  createdBy
  updatedBy
  createdAt
  updatedAt
  userId
}
",
}
`;
